version: "1.0"

stages:
  - "init"
  - "clone"
  - "build"
  - "test"
  - "release"
  - "demo"
  - "openshift"

steps:
  decide_release:
    title: Decide Release
    stage: init
    image: codefresh/cli
    shell: bash
    when:
      condition:
        all:
          mainBranch: '"${{CF_BRANCH}}" == "master"'
          noCiCdMessage: 'includes("${{CF_COMMIT_MESSAGE}}", "Version Release") == false'
    commands:
      - cf_export IS_RELEASE=true

  init:
    title: Init
    stage: init
    image: codefresh/cli
    shell: bash
    commands:
      - cf_export GITHUB_TOKEN=$(codefresh get context github --decrypt -o yaml | yq -y .spec.data.auth.password)
      - cf_export MAIN_REPO_PATH=/codefresh/volume/repo.git
      - export PRODUCT_NAME=${{CF_REPO_NAME}}
      - cf_export PRODUCT_NAME=${PRODUCT_NAME}
      - export CICD_REPO_NAME=cicd
      - cf_export CICD_REPO_NAME=${CICD_REPO_NAME}
      - cf_export CICD_REPO_PATH=/codefresh/volume/${CICD_REPO_NAME}.git
      - export CICD_DEMO_REPO_NAME=cicd-demo
      - cf_export CICD_DEMO_REPO_NAME=${CICD_DEMO_REPO_NAME}
      - cf_export CICD_DEMO_REPO_PATH=/codefresh/volume/${CICD_DEMO_REPO_NAME}.git
      - export OPENSHIFT_CERT_REPO_NAME=openshift-certification
      - cf_export OPENSHIFT_CERT_REPO_NAME=${OPENSHIFT_CERT_REPO_NAME}
      - cf_export OPENSHIFT_CERT_REPO_PATH=/codefresh/volume/${OPENSHIFT_CERT_REPO_NAME}.git      
      - cf_export IMAGE_NAME=kubevious/${{PRODUCT_NAME}}
      - cf_export IMAGE_NAME_DEMO=kubevious/${{PRODUCT_NAME}}-demo
      - cf_export IMAGE_NAME_UBI=kubevious/${{PRODUCT_NAME}}-ubi
      - 'echo "Is Release: ${IS_RELEASE}"'
      - 'echo "Product: ${PRODUCT_NAME}"'
      - 'echo "Repo: ${{CF_REPO_NAME}}"'
      - 'echo "Branch: ${{CF_BRANCH}}"'
      - 'echo "Revision: ${{CF_REVISION}}"'
      - 'echo "Author: ${{CF_COMMIT_AUTHOR}}"'
      - 'echo "Message: ${{CF_COMMIT_MESSAGE}}"'

  clone:
    title: Clone Repo
    stage: clone
    image: "alpine/git:latest"
    working_directory: "/codefresh/volume"
    commands:
      - pwd
      - ls -la
      - rm -rf ${{MAIN_REPO_PATH}}
      - "git clone https://${{CF_REPO_OWNER}}:${{GITHUB_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}.git ${{MAIN_REPO_PATH}}"
      - ls -la
      - cd ${{MAIN_REPO_PATH}}
      - git reset --hard ${{CF_REVISION}}
      - ls -la

  clone_cicd:
    title: Clone CI/CD Repo
    stage: clone
    image: "alpine/git:latest"
    working_directory: "/codefresh/volume"
    commands:
      - pwd
      - ls -la
      - rm -rf ${{CICD_REPO_PATH}}
      - "git clone https://${{CF_REPO_OWNER}}:${{GITHUB_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{CICD_REPO_NAME}}.git ${{CICD_REPO_PATH}}"
      - ls -la
      - cd ${{CICD_REPO_PATH}}
      - ls -la

  clone_cicd_demo:
    title: Clone CI/CD Demo Repo
    stage: clone
    image: "alpine/git:latest"
    working_directory: "/codefresh/volume"
    when:
      condition:
        all:
          isRelease: '"${{IS_RELEASE}}" == "true"'
    commands:
      - pwd
      - ls -la
      - rm -rf ${{CICD_DEMO_REPO_PATH}}
      - "git clone https://${{CF_REPO_OWNER}}:${{GITHUB_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{CICD_DEMO_REPO_NAME}}.git ${{CICD_DEMO_REPO_PATH}}"
      - ls -la
      - cd ${{CICD_DEMO_REPO_PATH}}
      - ls -la

  clone_openshift_cert:
    title: Clone OpenShift Cert Repo
    stage: clone
    image: "alpine/git:latest"
    working_directory: "/codefresh/volume"
    commands:
      - pwd
      - ls -la
      - rm -rf ${{OPENSHIFT_CERT_REPO_PATH}}
      - "git clone https://${{CF_REPO_OWNER}}:${{GITHUB_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{OPENSHIFT_CERT_REPO_NAME}}.git ${{OPENSHIFT_CERT_REPO_PATH}}"
      - ls -la
      - cd ${{OPENSHIFT_CERT_REPO_PATH}}
      - ls -la

  inject_version:
    title: Inject Version
    stage: build
    image: codefresh/cli
    shell: bash
    working_directory: "${{MAIN_REPO_PATH}}"
    when:
      condition:
        all:
          isRelease: '"${{IS_RELEASE}}" == "true"'
    commands:
      - pwd
      - ls -la
      - source ${{CICD_REPO_PATH}}/process-version-bump.sh
      - echo "NEW VERSION=${PRODUCT_VERSION}"
      - source version.sh
      - cf_export PRODUCT_VERSION=${PRODUCT_VERSION}
      - cf_export DOCKER_TAG=${PRODUCT_VERSION}
      - git status
      - git diff

  # prepare:
  #   title: Prepare Dependencies
  #   stage: build
  #   image: "kubevious/node-builder:14"
  #   working_directory: "${{MAIN_REPO_PATH}}"
  #   commands:
  #     - yarn install --frozen-lockfile

  # compile:
  #   title: Compile
  #   stage: build
  #   image: "kubevious/node-builder:14"
  #   working_directory: "${{MAIN_REPO_PATH}}"
  #   commands:
  #     - npm run build

  # build:
  #   title: "Building Docker Image"
  #   stage: build
  #   type: build
  #   image_name: "${{IMAGE_NAME}}"
  #   working_directory: "${{MAIN_REPO_PATH}}"
  #   disable_push: true

  # push_dockerhub:
  #   title: "Pushing image to DockerHub"
  #   stage: release
  #   type: push
  #   image_name: "${{IMAGE_NAME}}"
  #   registry: "dockerhub"
  #   candidate: "${{build}}"
  #   tags:
  #     - "${{DOCKER_TAG}}"
  #   when:
  #     condition:
  #       all:
  #         isRelease: '"${{IS_RELEASE}}" == "true"'

  # commit_main_repo:
  #   title: Commit Version Changes
  #   stage: release
  #   image: codefresh/cli
  #   working_directory: "${{MAIN_REPO_PATH}}"
  #   when:
  #     condition:
  #       all:
  #         isRelease: '"${{IS_RELEASE}}" == "true"'
  #   commands:
  #     - ${{CICD_REPO_PATH}}/cicd-commit-product-repo.sh

  # prepare_demo_build:
  #   title: Prepare Demo Build
  #   stage: demo
  #   image: codefresh/cli
  #   shell: bash
  #   working_directory: "${{MAIN_REPO_PATH}}"
  #   when:
  #     condition:
  #       all:
  #         isRelease: '"${{IS_RELEASE}}" == "true"'
  #   commands:
  #     - cp -f ${{CICD_DEMO_REPO_PATH}}/src/site-preview.jpg ./public/img/site-preview.jpg
  #     - cp -f ${{CICD_DEMO_REPO_PATH}}/src/seo.tsx ./src/components/SEO/index.tsx
  #     - git status

  # build_demo:
  #   title: "Building Demo Docker Image"
  #   stage: demo
  #   type: build
  #   image_name: "${{IMAGE_NAME_DEMO}}"
  #   working_directory: "${{MAIN_REPO_PATH}}"
  #   disable_push: true
  #   when:
  #     condition:
  #       all:
  #         isRelease: '"${{IS_RELEASE}}" == "true"'

  # push_demo_dockerhub:
  #   title: "Pushing Demo Image to DockerHub"
  #   stage: demo
  #   type: push
  #   image_name: "${{IMAGE_NAME_DEMO}}"
  #   registry: "dockerhub"
  #   candidate: "${{build_demo}}"
  #   tags:
  #     - "${{DOCKER_TAG}}"
  #   when:
  #     condition:
  #       all:
  #         isRelease: '"${{IS_RELEASE}}" == "true"'

  openshift_build:
    title: "Building UBI Image"
    stage: openshift
    type: build
    image_name: "${{IMAGE_NAME_UBI}}"
    dockerfile: Dockerfile.ubi
    working_directory: "${{MAIN_REPO_PATH}}"
    disable_push: true
    when:
      condition:
        all:
          isRelease: '"${{IS_RELEASE}}" == "true"'

  openshift_push_dockerhub:
    title: "Pushing UBI Image to DockerHub"
    stage: openshift
    type: push
    image_name: "${{IMAGE_NAME_UBI}}"
    registry: "dockerhub"
    candidate: "${{openshift_build}}"
    tags:
      - "${{DOCKER_TAG}}"
    when:
      condition:
        all:
          isRelease: '"${{IS_RELEASE}}" == "true"'

  openshift_preflight_check:
    title: OpenShift Preflight Check
    stage: openshift
    image: "kubevious/openshift-preflight-checker:latest"
    working_directory: "/codefresh/volume"
    when:
      condition:
        all:
          isRelease: '"${{IS_RELEASE}}" == "true"'    
    commands:
      - ls -la ${{OPENSHIFT_CERT_REPO_PATH}}/
      - ls -la ${{OPENSHIFT_CERT_REPO_PATH}}/projects/
      - source ${{OPENSHIFT_CERT_REPO_PATH}}/projects/configuration.sh
      - preflight check container ${{IMAGE_NAME_UBI}}:${{DOCKER_TAG}}
